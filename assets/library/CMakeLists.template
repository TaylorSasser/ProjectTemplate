cmake_minimum_required(VERSION 3.10)
project({PROJECT_NAME} VERSION 1.0.0 LANGUAGES CXX C ASM)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")


add_library({PROJECT_NAME}
    src/file.cpp
)

add_library(
    {PROJECT_NAME}::{PROJECT_NAME} ALIAS {PROJECT_NAME}
)

target_include_directories(
    {PROJECT_NAME}
        PUBLIC
        $<INSTALL_INTERFACE:include>
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
    PRIVATE
        ${CMAKE_CURRENT_SOURCE_DIR}/src
)


find_package(fmt CONFIG REQUIRED)
target_link_libraries({PROJECT_NAME} PUBLIC fmt::fmt)

target_compile_features({PROJECT_NAME}
    PRIVATE cxx_auto_type cxx_lambdas cxx_trailing_return_types cxx_variadic_macros
)

target_compile_options({PROJECT_NAME}
    PRIVATE
)

include(GNUInstallDirs)
set(INSTALL_CONFIGDIR ${CMAKE_INSTALL_LIBDIR}/cmake/{PROJECT_NAME}_utils)

install(
    TARGETS {PROJECT_NAME}
    EXPORT {PROJECT_NAME}_targets
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
)

install(DIRECTORY include/ DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})

include(CMakePackageConfigHelpers)
write_basic_package_version_file(
    ${CMAKE_CURRENT_BINARY_DIR}/{PROJECT_NAME}_config_version.cmake
    VERSION ${PROJECT_VERSION}
    COMPATIBILITY AnyNewerVersion
)

install(FILES
    DESTINATION ${INSTALL_CONFIGDIR}
)

export(
    EXPORT {PROJECT_NAME}_targets
    FILE ${CMAKE_CURRENT_BINARY_DIR}/{PROJECT_NAME}_targets.cmake
    NAMESPACE {PROJECT_NAME}::
)

export(PACKAGE {PROJECT_NAME})
add_subdirectory(example)
add_subdirectory(tests)

